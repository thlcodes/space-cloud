{"version":3,"sources":["components/settings/project/SecretConfigure.jsx"],"names":["AddSecretModal","handleSubmit","handleCancel","initialValues","useForm","form","useState","isPrivateKeyLoading","setPrivateKeyLoading","formInitialValues","alg","secret","generateJWTSecret","privateKey","undefined","publicKey","jwkUrl","isPrimary","checkAudience","aud","length","checkIssuer","iss","kid","generateId","title","okText","visible","onOk","e","validateFields","then","values","Object","assign","forgePrivateKey","forge","pki","privateKeyFromPem","forgePublicKey","setRsaPublicKey","n","publicKeyToPem","generateRSAPublicKeyFromPrivateKey","obj","onCancel","width","layout","name","Item","onChange","setTimeout","a","keypair","private","setFieldsValue","Option","value","dependency","condition","getFieldValue","rules","required","message","Password","className","placeholder","valuePropName","spinning","size","TextArea","rows","style","background","bordered","Panel","header","key","description","List","fields","add","remove","map","field","marginBottom","validateTrigger","noStyle","marginLeft","onClick","catch","ex","console","log","hint","ViewSecretModal","secretData","footer","Paragraph","fontSize","strong","Fragment","copyable","text","SecretConfigure","secrets","handleRemoveSecret","handleChangePrimarySecret","handleSaveSecret","secretsData","secretModalVisible","setSecretModalVisible","viewSecretModalVisible","setViewSecretModalVisible","secretClickedIndex","setSecretClickedIndex","secretClickedDetails","columns","dataIndex","placement","render","_","record","index","checked","handleViewClick","handleEditClick","onConfirm","color","display","justifyContent","type","showIcon","marginTop","dataSource","pagination","rowKey"],"mappings":"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","file":"static/js/13.2d84975d.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { QuestionCircleOutlined, DeleteOutlined, PlusOutlined } from '@ant-design/icons';\nimport { Form, Tooltip, Button, Radio, Alert, Popconfirm, Table, Modal, Input, Checkbox, Select, Typography, Spin, Collapse } from 'antd';\nimport FormItemLabel from \"../../form-item-label/FormItemLabel\";\nimport { generateJWTSecret } from '../../../utils';\nimport ConditionalFormBlock from '../../conditional-form-block/ConditionalFormBlock';\nimport keypair from \"keypair\";\nimport forge from \"node-forge\"\nimport { generateId } from 'space-api/dist/lib/utils';\n\nconst generateRSAPrivateKey = () => {\n  return keypair().private\n}\n\nconst generateRSAPublicKeyFromPrivateKey = (privateKey) => {\n  var forgePrivateKey = forge.pki.privateKeyFromPem(privateKey);\n\n  // get a Forge public key from the Forge private key\n  var forgePublicKey = forge.pki.setRsaPublicKey(forgePrivateKey.n, forgePrivateKey.e);\n\n  // convert the Forge public key to a PEM-formatted public key\n  var publicKey = forge.pki.publicKeyToPem(forgePublicKey);\n  return publicKey\n}\n\n\nconst AddSecretModal = ({ handleSubmit, handleCancel, initialValues }) => {\n  const [form] = Form.useForm();\n\n  const [isPrivateKeyLoading, setPrivateKeyLoading] = useState(false);\n\n  const formInitialValues = {\n    alg: initialValues ? initialValues.alg : \"HS256\",\n    secret: initialValues ? initialValues.secret : generateJWTSecret(),\n    privateKey: initialValues ? initialValues.privateKey : undefined,\n    publicKey: initialValues ? initialValues.publicKey : undefined,\n    jwkUrl: initialValues ? initialValues.jwkUrl : undefined,\n    isPrimary: initialValues ? initialValues.isPrimary : false,\n    checkAudience: initialValues && initialValues.aud && initialValues.aud.length > 0 ? true : false,\n    checkIssuer: initialValues && initialValues.iss ? true : false,\n    aud: initialValues && initialValues.aud ? initialValues.aud : [\"\"],\n    iss: initialValues && initialValues.iss ? initialValues.iss : [\"\"],\n    kid: initialValues && initialValues.kid ? initialValues.kid : generateId()\n  }\n\n  const handleSubmitClick = (e) => {\n    form.validateFields().then(values => {\n      values = Object.assign({}, formInitialValues, values)\n      let { alg, secret, privateKey, publicKey, jwkUrl, isPrimary, checkAudience, checkIssuer, aud, iss, kid } = values;\n      if (alg === \"RS256\" && privateKey) {\n        publicKey = generateRSAPublicKeyFromPrivateKey(privateKey)\n      }\n      if (!checkAudience) {\n        aud = undefined\n      }\n      if (!checkIssuer) {\n        iss = undefined\n      }\n      let obj = {}\n      switch (alg) {\n        case \"HS256\":\n          obj = { alg, secret, isPrimary, aud, iss, kid }\n          break\n        case \"RS256\":\n          obj = { alg, publicKey, privateKey, isPrimary, aud, iss, kid }\n          break\n        case \"RS256_PUBLIC\":\n          obj = { alg, publicKey, aud, iss, kid }\n          break\n        case \"JWK_URL\":\n          obj = { alg, jwkUrl, aud, iss }\n          break\n      }\n      handleSubmit(obj).then(() => handleCancel())\n    });\n  };\n\n  const onAlgorithmChange = (alg) => {\n    if (alg === \"RS256\") {\n      setPrivateKeyLoading(true);\n      // We had to use this timeout to prevent the UI from freezing\n      setTimeout(async () => {\n        const privateKey = await generateRSAPrivateKey();\n        form.setFieldsValue({ privateKey })\n        setPrivateKeyLoading(false);\n      }, 500)\n    }\n  }\n\n  return (\n    <Modal\n      title=\"Add secret\"\n      okText={initialValues ? \"Save\" : \"Add\"}\n      visible={true}\n      onOk={handleSubmitClick}\n      onCancel={handleCancel}\n      width={720}\n    >\n      <Form\n        form={form}\n        layout=\"vertical\"\n        initialValues={formInitialValues}\n      >\n        <FormItemLabel name=\"Algorithm\" />\n        <Form.Item name=\"alg\">\n          <Select onChange={onAlgorithmChange}>\n            <Select.Option value=\"HS256\">HS256</Select.Option>\n            <Select.Option value=\"RS256\">RS256</Select.Option>\n            <Select.Option value=\"RS256_PUBLIC\">RS256 PUBLIC</Select.Option>\n            <Select.Option value=\"JWK_URL\">JWK URL</Select.Option>\n          </Select>\n        </Form.Item>\n        <ConditionalFormBlock dependency=\"alg\" condition={() => form.getFieldValue(\"alg\") === \"HS256\"}>\n          <FormItemLabel name=\"Secret\" />\n          <Form.Item name=\"secret\"\n            rules={[{ required: true, message: 'Please provide a secret' }]}\n          >\n            <Input.Password className=\"input\" placeholder=\"Secret value\" />\n          </Form.Item>\n          <FormItemLabel name=\"Primary secret\" />\n          <Form.Item name=\"isPrimary\" valuePropName=\"checked\">\n            <Checkbox >Use this secret in user management module of API gateway to sign tokens on successful signup/signin requests</Checkbox>\n          </Form.Item>\n        </ConditionalFormBlock>\n        <ConditionalFormBlock dependency=\"alg\" condition={() => form.getFieldValue(\"alg\") === \"RS256\"}>\n          <FormItemLabel name=\"Private key\" />\n          <Form.Item name=\"privateKey\">\n            {\n              isPrivateKeyLoading ?\n                <span><Spin className='page-loading' spinning={true} size=\"large\" /> Generating Private Key......</span> :\n                <Input.TextArea rows={4} placeholder=\"Private key\" />\n            }\n          </Form.Item>\n          <FormItemLabel name=\"Primary secret\" />\n          <Form.Item name=\"isPrimary\" valuePropName=\"checked\">\n            <Checkbox >Use this secret in user management module of API gateway to sign tokens on successful signup/signin requests</Checkbox>\n          </Form.Item>\n        </ConditionalFormBlock>\n        <ConditionalFormBlock dependency=\"alg\" condition={() => form.getFieldValue(\"alg\") === \"JWK_URL\"}>\n          <FormItemLabel name=\"JWK URL\" />\n          <Form.Item name=\"jwkUrl\" rules={[{ required: true, message: 'Please provide an URL' }]}>\n            <Input placeholder=\"JWK URL\" />\n          </Form.Item>\n        </ConditionalFormBlock>\n        <ConditionalFormBlock dependency=\"alg\" condition={() => form.getFieldValue(\"alg\") === \"RS256_PUBLIC\"}>\n          <FormItemLabel name=\"Public key\" />\n          <Form.Item name=\"publicKey\">\n            <Input.TextArea rows={4} placeholder=\"Public key\" />\n          </Form.Item>\n        </ConditionalFormBlock>\n        <Collapse className=\"advanced\" style={{ background: \"white\" }} bordered={false} >\n          <Collapse.Panel header=\"Advanced\" key=\"advanced\">\n            <FormItemLabel name='Check audience' />\n            <Form.Item name='checkAudience' valuePropName='checked'>\n              <Checkbox>\n                Check audience while verifying JWT token\n              </Checkbox>\n            </Form.Item>\n            <ConditionalFormBlock\n              dependency='checkAudience'\n              condition={() => form.getFieldValue('checkAudience') === true}\n            >\n              <FormItemLabel name=\"Specify audiences\" description=\"The audience check will pass if the JWT matches any one of the specified audiences below\" />\n              <Form.List name=\"aud\">\n                {(fields, { add, remove }) => {\n                  return (\n                    <div>\n                      {fields.map((field) => (\n                        <Form.Item key={field.key} style={{ marginBottom: 8 }}>\n                          <Form.Item\n                            {...field}\n                            validateTrigger={['onChange', 'onBlur']}\n                            rules={[\n                              {\n                                required: true,\n                                message: \"Please input a value\",\n                              }\n                            ]}\n                            noStyle\n                          >\n                            <Input placeholder=\"Audience value\" style={{ width: \"90%\" }} />\n                          </Form.Item>\n                          {fields.length > 1 ? <DeleteOutlined\n                            style={{ marginLeft: 16 }}\n                            onClick={() => {\n                              remove(field.name);\n                            }}\n                          /> : null}\n                        </Form.Item>\n                      ))}\n                      <Form.Item>\n                        <Button onClick={() => {\n                          form.validateFields(fields.map(obj => [\"aud\", obj.name]))\n                            .then(() => add())\n                            .catch(ex => console.log(\"Exception\", ex))\n                        }}>\n                          <PlusOutlined /> Add\n                        </Button>\n                      </Form.Item>\n                    </div>\n                  );\n                }}\n              </Form.List>\n            </ConditionalFormBlock>\n            <FormItemLabel name='Check issuer' />\n            <Form.Item name='checkIssuer' valuePropName='checked'>\n              <Checkbox>\n                Check issuer while verifying JWT token\n              </Checkbox>\n            </Form.Item>\n            <ConditionalFormBlock\n              dependency='checkIssuer'\n              condition={() => form.getFieldValue('checkIssuer') === true}\n            >\n              <FormItemLabel name=\"Specify issuers\" description=\"The issuer check will pass if the JWT matches any one of the specified issuers below\" />\n              <Form.List name=\"iss\">\n                {(fields, { add, remove }) => {\n                  return (\n                    <div>\n                      {fields.map((field) => (\n                        <Form.Item key={field.key} style={{ marginBottom: 8 }}>\n                          <Form.Item\n                            {...field}\n                            validateTrigger={['onChange', 'onBlur']}\n                            rules={[\n                              {\n                                required: true,\n                                message: \"Please input a value\",\n                              }\n                            ]}\n                            noStyle\n                          >\n                            <Input placeholder=\"Issuer value\" style={{ width: \"90%\" }} />\n                          </Form.Item>\n                          {fields.length > 1 ? <DeleteOutlined\n                            style={{ marginLeft: 16 }}\n                            onClick={() => {\n                              remove(field.name);\n                            }}\n                          /> : null}\n                        </Form.Item>\n                      ))}\n                      <Form.Item>\n                        <Button onClick={() => {\n                          form.validateFields(fields.map(obj => [\"iss\", obj.name]))\n                            .then(() => add())\n                            .catch(ex => console.log(\"Exception\", ex))\n                        }}>\n                          <PlusOutlined /> Add\n                        </Button>\n                      </Form.Item>\n                    </div>\n                  );\n                }}\n              </Form.List>\n            </ConditionalFormBlock>\n            <ConditionalFormBlock\n              dependency=\"alg\"\n              condition={() => form.getFieldValue(\"alg\") !== \"JWK_URL\"}>\n              <FormItemLabel name=\"kid\" hint=\"(key ID)\" />\n              <Form.Item name=\"kid\" rules={[{ required: true, message: \"Please input a value!\" }]}>\n                <Input placeholder=\"kid\" />\n              </Form.Item>\n            </ConditionalFormBlock>\n          </Collapse.Panel>\n        </Collapse>\n      </Form>\n    </Modal>\n  )\n}\n\nconst ViewSecretModal = ({ secretData, handleCancel }) => {\n  return (\n    <Modal\n      title=\"View secret\"\n      visible={true}\n      footer={null}\n      onCancel={handleCancel}\n      width={720}\n    >\n      <Typography.Paragraph style={{ fontSize: 16 }} strong>Algorithm</Typography.Paragraph>\n      <div style={{ marginBottom: 24 }}>{secretData.alg}</div>\n      {secretData.alg === \"HS256\" && (\n        <React.Fragment>\n          <Typography.Paragraph style={{ fontSize: 16 }} copyable={{ text: secretData.secret }} strong>Secret</Typography.Paragraph>\n          <Input value={secretData.secret} />\n        </React.Fragment>\n      )}\n      {secretData.alg === \"RS256\" && (\n        <React.Fragment>\n          <Typography.Paragraph style={{ fontSize: 16 }} copyable={{ text: secretData.publicKey }} strong>Public key</Typography.Paragraph>\n          <div style={{ marginBottom: 24 }}><Input.TextArea rows={4} value={secretData.publicKey} /></div>\n          <Typography.Paragraph style={{ fontSize: 16 }} copyable={{ text: secretData.privateKey }} strong>Private key</Typography.Paragraph>\n          <div style={{ marginBottom: 24 }}><Input.TextArea rows={4} value={secretData.privateKey} /></div>\n        </React.Fragment>\n      )}\n      {secretData.alg === \"JWK_URL\" && (\n        <React.Fragment>\n          <Typography.Paragraph style={{ fontSize: 16 }} copyable={{ text: secretData.jwkUrl }} strong>URL</Typography.Paragraph>\n          <Input value={secretData.jwkUrl} />\n        </React.Fragment>\n      )}\n      {secretData.alg === \"RS256_PUBLIC\" && (\n        <React.Fragment>\n          <Typography.Paragraph style={{ fontSize: 16 }} copyable={{ text: secretData.publicKey }} strong>Public key</Typography.Paragraph>\n          <div style={{ marginBottom: 24 }}><Input.TextArea rows={4} value={secretData.publicKey} /></div>\n        </React.Fragment>\n      )}\n    </Modal>\n  )\n}\n\nconst SecretConfigure = ({ secrets, handleRemoveSecret, handleChangePrimarySecret, handleSaveSecret }) => {\n\n  // For backword compatibility assume the `alg` as `HS256`\n  const secretsData = secrets.map(obj => Object.assign({}, obj, { alg: obj.alg ? obj.alg : \"HS256\" }))\n\n  const [secretModalVisible, setSecretModalVisible] = useState(false);\n  const [viewSecretModalVisible, setViewSecretModalVisible] = useState(false);\n  const [secretClickedIndex, setSecretClickedIndex] = useState(undefined);\n  const secretClickedDetails = secretClickedIndex !== undefined ? secretsData[secretClickedIndex] : null\n\n  const handleViewClick = (index) => {\n    setSecretClickedIndex(index)\n    setViewSecretModalVisible(true)\n  }\n\n  const handleEditClick = (index) => {\n    setSecretClickedIndex(index)\n    setSecretModalVisible(true)\n  }\n\n  const handleCancel = () => {\n    setSecretModalVisible(false)\n    setSecretClickedIndex(undefined)\n  }\n\n  const handleCancelView = () => {\n    setViewSecretModalVisible(false)\n    setSecretClickedIndex(undefined)\n  }\n\n  const columns = [\n    {\n      title: 'Algorithm',\n      dataIndex: 'alg'\n    },\n    {\n      title: <span>Primary secret  <Tooltip placement=\"bottomLeft\" title=\"Primary secret is used by the user management module of API gateway to sign tokens on successful signup/signin requests.\">\n        <QuestionCircleOutlined />\n      </Tooltip></span>,\n      render: (_, record, index) => {\n        if (record.alg === \"JWK_URL\" || record.alg === \"RS256_PUBLIC\") return <span>N/A</span>\n        return <Radio\n          checked={record.isPrimary}\n          onChange={!record.isPrimary ? () => handleChangePrimarySecret(index) : undefined} />\n      }\n    },\n    {\n      title: \"Actions\",\n      className: 'column-actions',\n      render: (_, record, index) => {\n        return (\n          <span>\n            <a onClick={() => handleViewClick(index)}>View</a>\n            <a onClick={() => handleEditClick(index)}>Edit</a>\n            <Popconfirm\n              title={record.isPrimary ? \"You are deleting primary secret. Any remaining secret will be randomly chosen as primary key.\" : \"Tokens signed with this secret will stop getting verified\"}\n              onConfirm={() => handleRemoveSecret(index)}\n            >\n              <a style={{ color: \"red\" }}>Remove</a>\n            </Popconfirm>\n          </span>\n        )\n      }\n    }\n  ];\n\n  return (\n    <div>\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n        <h2 style={{ display: \"inline-block\" }}>JWT Secrets</h2>\n        <Button onClick={() => setSecretModalVisible(true)}>\n          Add\n        </Button>\n      </div>\n      <p>These secrets are used by the auth module in Space Cloud to verify the JWT token for all API requests</p>\n      <Alert\n        description=\"Space Cloud supports multiple JWT secrets to safely rotate them\"\n        type=\"info\"\n        showIcon\n      />\n      <Table\n        style={{ marginTop: 16 }}\n        columns={columns}\n        dataSource={secretsData}\n        bordered={true}\n        pagination={false}\n        rowKey=\"key\"\n      />\n      {secretModalVisible && <AddSecretModal\n        initialValues={secretClickedDetails}\n        handleSubmit={(values) => handleSaveSecret(values, secretClickedIndex)}\n        handleCancel={handleCancel} />}\n      {viewSecretModalVisible && <ViewSecretModal\n        secretData={secretClickedDetails}\n        handleCancel={handleCancelView} />}\n    </div>\n  )\n}\n\nexport default SecretConfigure;"],"sourceRoot":""}